// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"
)

// InventoryData is an autogenerated mock type for the InventoryData type
type InventoryData struct {
	mock.Mock
}

// CekStok provides a mock function with given fields: newRecap, id
func (_m *InventoryData) CekStok(newRecap []domain.InventoryProduct, id int) bool {
	ret := _m.Called(newRecap, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]domain.InventoryProduct, int) bool); ok {
		r0 = rf(newRecap, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateAdminDetailInventoryData provides a mock function with given fields: newRecap, id, gen, invenid, role
func (_m *InventoryData) CreateAdminDetailInventoryData(newRecap []domain.InventoryProduct, id int, gen string, invenid int, role string) []domain.InventoryProduct {
	ret := _m.Called(newRecap, id, gen, invenid, role)

	var r0 []domain.InventoryProduct
	if rf, ok := ret.Get(0).(func([]domain.InventoryProduct, int, string, int, string) []domain.InventoryProduct); ok {
		r0 = rf(newRecap, id, gen, invenid, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.InventoryProduct)
		}
	}

	return r0
}

// CreateAdminInventoryData provides a mock function with given fields: newRecap, id, gen
func (_m *InventoryData) CreateAdminInventoryData(newRecap domain.Inventory, id int, gen string) domain.Inventory {
	ret := _m.Called(newRecap, id, gen)

	var r0 domain.Inventory
	if rf, ok := ret.Get(0).(func(domain.Inventory, int, string) domain.Inventory); ok {
		r0 = rf(newRecap, id, gen)
	} else {
		r0 = ret.Get(0).(domain.Inventory)
	}

	return r0
}

// CreateUserDetailInventoryData provides a mock function with given fields: newRecap, id, gen, invenid
func (_m *InventoryData) CreateUserDetailInventoryData(newRecap []domain.InventoryProduct, id int, gen string, invenid int) []domain.InventoryProduct {
	ret := _m.Called(newRecap, id, gen, invenid)

	var r0 []domain.InventoryProduct
	if rf, ok := ret.Get(0).(func([]domain.InventoryProduct, int, string, int) []domain.InventoryProduct); ok {
		r0 = rf(newRecap, id, gen, invenid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.InventoryProduct)
		}
	}

	return r0
}

// CreateUserInventoryData provides a mock function with given fields: newRecap, id, gen
func (_m *InventoryData) CreateUserInventoryData(newRecap domain.Inventory, id int, gen string) domain.Inventory {
	ret := _m.Called(newRecap, id, gen)

	var r0 domain.Inventory
	if rf, ok := ret.Get(0).(func(domain.Inventory, int, string) domain.Inventory); ok {
		r0 = rf(newRecap, id, gen)
	} else {
		r0 = ret.Get(0).(domain.Inventory)
	}

	return r0
}

// DeleteAdminInOutBound provides a mock function with given fields:
func (_m *InventoryData) DeleteAdminInOutBound() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeleteInOutBound provides a mock function with given fields: id
func (_m *InventoryData) DeleteInOutBound(id int) string {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadAdminOutBoundDetailData provides a mock function with given fields: outboundIDGenerate
func (_m *InventoryData) ReadAdminOutBoundDetailData(outboundIDGenerate string) []domain.InventoryProduct {
	ret := _m.Called(outboundIDGenerate)

	var r0 []domain.InventoryProduct
	if rf, ok := ret.Get(0).(func(string) []domain.InventoryProduct); ok {
		r0 = rf(outboundIDGenerate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.InventoryProduct)
		}
	}

	return r0
}

// ReadAdminOutBoundHistoryData provides a mock function with given fields:
func (_m *InventoryData) ReadAdminOutBoundHistoryData() []domain.Inventory {
	ret := _m.Called()

	var r0 []domain.Inventory
	if rf, ok := ret.Get(0).(func() []domain.Inventory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Inventory)
		}
	}

	return r0
}

// ReadUserOutBoundDetailData provides a mock function with given fields: id, outboundIDGenerate
func (_m *InventoryData) ReadUserOutBoundDetailData(id int, outboundIDGenerate string) []domain.InventoryProduct {
	ret := _m.Called(id, outboundIDGenerate)

	var r0 []domain.InventoryProduct
	if rf, ok := ret.Get(0).(func(int, string) []domain.InventoryProduct); ok {
		r0 = rf(id, outboundIDGenerate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.InventoryProduct)
		}
	}

	return r0
}

// ReadUserOutBoundHistoryData provides a mock function with given fields: id
func (_m *InventoryData) ReadUserOutBoundHistoryData(id int) []domain.Inventory {
	ret := _m.Called(id)

	var r0 []domain.Inventory
	if rf, ok := ret.Get(0).(func(int) []domain.Inventory); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Inventory)
		}
	}

	return r0
}

// RekapAdminStock provides a mock function with given fields: newRecap, id, gen
func (_m *InventoryData) RekapAdminStock(newRecap []domain.InventoryProduct, id int, gen string) bool {
	ret := _m.Called(newRecap, id, gen)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]domain.InventoryProduct, int, string) bool); ok {
		r0 = rf(newRecap, id, gen)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RekapStock provides a mock function with given fields: newRecap, id, gen
func (_m *InventoryData) RekapStock(newRecap []domain.InventoryProduct, id int, gen string) bool {
	ret := _m.Called(newRecap, id, gen)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]domain.InventoryProduct, int, string) bool); ok {
		r0 = rf(newRecap, id, gen)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewInventoryData interface {
	mock.TestingT
	Cleanup(func())
}

// NewInventoryData creates a new instance of InventoryData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInventoryData(t mockConstructorTestingTNewInventoryData) *InventoryData {
	mock := &InventoryData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
