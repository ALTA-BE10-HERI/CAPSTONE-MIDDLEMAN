// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"
)

// OrderUseCase is an autogenerated mock type for the OrderUseCase type
type OrderUseCase struct {
	mock.Mock
}

// AcceptPayment provides a mock function with given fields: data
func (_m *OrderUseCase) AcceptPayment(data domain.PaymentWeb) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.PaymentWeb) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.PaymentWeb) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmOrder provides a mock function with given fields: orderName, role
func (_m *OrderUseCase) ConfirmOrder(orderName string, role string) (domain.Order, int) {
	ret := _m.Called(orderName, role)

	var r0 domain.Order
	if rf, ok := ret.Get(0).(func(string, string) domain.Order); ok {
		r0 = rf(orderName, role)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string) int); ok {
		r1 = rf(orderName, role)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: dataOrder, idUser
func (_m *OrderUseCase) CreateOrder(dataOrder domain.Order, idUser int) int {
	ret := _m.Called(dataOrder, idUser)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Order, int) int); ok {
		r0 = rf(dataOrder, idUser)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DoneOrder provides a mock function with given fields: orderid
func (_m *OrderUseCase) DoneOrder(orderid string) (domain.Order, int) {
	ret := _m.Called(orderid)

	var r0 domain.Order
	if rf, ok := ret.Get(0).(func(string) domain.Order); ok {
		r0 = rf(orderid)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(orderid)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetAllAdmin provides a mock function with given fields: limit, offset, role
func (_m *OrderUseCase) GetAllAdmin(limit int, offset int, role string) ([]domain.Order, error) {
	ret := _m.Called(limit, offset, role)

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func(int, int, string) []domain.Order); ok {
		r0 = rf(limit, offset, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(limit, offset, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields: limit, offset, idUser
func (_m *OrderUseCase) GetAllUser(limit int, offset int, idUser int) ([]domain.Order, error) {
	ret := _m.Called(limit, offset, idUser)

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func(int, int, int) []domain.Order); ok {
		r0 = rf(limit, offset, idUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(limit, offset, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetail provides a mock function with given fields: idUser, idOrder
func (_m *OrderUseCase) GetDetail(idUser int, idOrder int) (int, error) {
	ret := _m.Called(idUser, idOrder)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(idUser, idOrder)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idUser, idOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIncoming provides a mock function with given fields: limit, offset, role
func (_m *OrderUseCase) GetIncoming(limit int, offset int, role string) ([]domain.Order, error) {
	ret := _m.Called(limit, offset, role)

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func(int, int, string) []domain.Order); ok {
		r0 = rf(limit, offset, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(limit, offset, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItems provides a mock function with given fields: idOrder
func (_m *OrderUseCase) GetItems(idOrder int) ([]domain.Items, error) {
	ret := _m.Called(idOrder)

	var r0 []domain.Items
	if rf, ok := ret.Get(0).(func(int) []domain.Items); ok {
		r0 = rf(idOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Items)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Payment provides a mock function with given fields: grandTotal, idUser
func (_m *OrderUseCase) Payment(grandTotal int, idUser int) (string, string, string, domain.User) {
	ret := _m.Called(grandTotal, idUser)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(grandTotal, idUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int, int) string); ok {
		r1 = rf(grandTotal, idUser)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(int, int) string); ok {
		r2 = rf(grandTotal, idUser)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 domain.User
	if rf, ok := ret.Get(3).(func(int, int) domain.User); ok {
		r3 = rf(grandTotal, idUser)
	} else {
		r3 = ret.Get(3).(domain.User)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewOrderUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderUseCase creates a new instance of OrderUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderUseCase(t mockConstructorTestingTNewOrderUseCase) *OrderUseCase {
	mock := &OrderUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
