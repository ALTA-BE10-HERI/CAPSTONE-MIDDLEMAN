// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"
)

// ChartData is an autogenerated mock type for the ChartData type
type ChartData struct {
	mock.Mock
}

// CheckCart provides a mock function with given fields: idProd, idFromToken
func (_m *ChartData) CheckCart(idProd int, idFromToken int) (bool, int, error) {
	ret := _m.Called(idProd, idFromToken)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(idProd, idFromToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(idProd, idFromToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(idProd, idFromToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteDataDB provides a mock function with given fields: idProd, idFromToken
func (_m *ChartData) DeleteDataDB(idProd int, idFromToken int) (int, error) {
	ret := _m.Called(idProd, idFromToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(idProd, idFromToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idProd, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceProduct provides a mock function with given fields: id
func (_m *ChartData) GetPriceProduct(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQtyProductCart provides a mock function with given fields: idProd
func (_m *ChartData) GetQtyProductCart(idProd int) (int, error) {
	ret := _m.Called(idProd)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(idProd)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idProd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStockProduct provides a mock function with given fields: idProduct
func (_m *ChartData) GetStockProduct(idProduct int) (int, error) {
	ret := _m.Called(idProduct)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(idProduct)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: data
func (_m *ChartData) InsertData(data domain.Cart) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Cart) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Cart) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectData provides a mock function with given fields: limit, offset, idFromToken
func (_m *ChartData) SelectData(limit int, offset int, idFromToken int) ([]domain.Cart, error) {
	ret := _m.Called(limit, offset, idFromToken)

	var r0 []domain.Cart
	if rf, ok := ret.Get(0).(func(int, int, int) []domain.Cart); ok {
		r0 = rf(limit, offset, idFromToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(limit, offset, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataDB provides a mock function with given fields: qty, idProd, productPrice, idFromToken
func (_m *ChartData) UpdateDataDB(qty int, idProd int, productPrice int, idFromToken int) (int, error) {
	ret := _m.Called(qty, idProd, productPrice, idFromToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, int, int) int); ok {
		r0 = rf(qty, idProd, productPrice, idFromToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, int) error); ok {
		r1 = rf(qty, idProd, productPrice, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChartData interface {
	mock.TestingT
	Cleanup(func())
}

// NewChartData creates a new instance of ChartData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChartData(t mockConstructorTestingTNewChartData) *ChartData {
	mock := &ChartData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
