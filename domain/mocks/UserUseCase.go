// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"

	user "middleman-capstone/feature/users"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: newUser
func (_m *UserUseCase) AddUser(newUser domain.User) (int, error) {
	ret := _m.Called(newUser)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.User) int); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCase provides a mock function with given fields: userID
func (_m *UserUseCase) DeleteCase(userID int) (int, error) {
	ret := _m.Called(userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: id
func (_m *UserUseCase) GetProfile(id int) (domain.User, error) {
	ret := _m.Called(id)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(int) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: auth
func (_m *UserUseCase) Login(auth user.LoginModel) (map[string]interface{}, error) {
	ret := _m.Called(auth)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(user.LoginModel) map[string]interface{}); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.LoginModel) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCase provides a mock function with given fields: input, idUser
func (_m *UserUseCase) UpdateCase(input domain.User, idUser int) (int, error) {
	ret := _m.Called(input, idUser)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.User, int) int); ok {
		r0 = rf(input, idUser)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User, int) error); ok {
		r1 = rf(input, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t mockConstructorTestingTNewUserUseCase) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
