// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductUserData is an autogenerated mock type for the ProductUserData type
type ProductUserData struct {
	mock.Mock
}

// CreateProductData provides a mock function with given fields: newProduct
func (_m *ProductUserData) CreateProductData(newProduct domain.ProductUser) domain.ProductUser {
	ret := _m.Called(newProduct)

	var r0 domain.ProductUser
	if rf, ok := ret.Get(0).(func(domain.ProductUser) domain.ProductUser); ok {
		r0 = rf(newProduct)
	} else {
		r0 = ret.Get(0).(domain.ProductUser)
	}

	return r0
}

// DeleteProductData provides a mock function with given fields: productid, id
func (_m *ProductUserData) DeleteProductData(productid int, id int) string {
	ret := _m.Called(productid, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(productid, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadAllProductData provides a mock function with given fields: id
func (_m *ProductUserData) ReadAllProductData(id int) []domain.ProductUser {
	ret := _m.Called(id)

	var r0 []domain.ProductUser
	if rf, ok := ret.Get(0).(func(int) []domain.ProductUser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductUser)
		}
	}

	return r0
}

// SearchRestoData provides a mock function with given fields: search, idUser
func (_m *ProductUserData) SearchRestoData(search string, idUser int) ([]domain.ProductUser, error) {
	ret := _m.Called(search, idUser)

	var r0 []domain.ProductUser
	if rf, ok := ret.Get(0).(func(string, int) []domain.ProductUser); ok {
		r0 = rf(search, idUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(search, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductData provides a mock function with given fields: data, productid, id
func (_m *ProductUserData) UpdateProductData(data map[string]interface{}, productid int, id int) domain.ProductUser {
	ret := _m.Called(data, productid, id)

	var r0 domain.ProductUser
	if rf, ok := ret.Get(0).(func(map[string]interface{}, int, int) domain.ProductUser); ok {
		r0 = rf(data, productid, id)
	} else {
		r0 = ret.Get(0).(domain.ProductUser)
	}

	return r0
}

type mockConstructorTestingTNewProductUserData interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductUserData creates a new instance of ProductUserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductUserData(t mockConstructorTestingTNewProductUserData) *ProductUserData {
	mock := &ProductUserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
