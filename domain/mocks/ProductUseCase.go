// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductUseCase is an autogenerated mock type for the ProductUseCase type
type ProductUseCase struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: newProduct, idAdmin
func (_m *ProductUseCase) CreateProduct(newProduct domain.Product, idAdmin int) int {
	ret := _m.Called(newProduct, idAdmin)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Product, int) int); ok {
		r0 = rf(newProduct, idAdmin)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: productid
func (_m *ProductUseCase) DeleteProduct(productid int) int {
	ret := _m.Called(productid)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(productid)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetAllProduct provides a mock function with given fields: limit, offset
func (_m *ProductUseCase) GetAllProduct(limit int, offset int) ([]domain.Product, error) {
	ret := _m.Called(limit, offset)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(int, int) []domain.Product); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRestoBusiness provides a mock function with given fields: search
func (_m *ProductUseCase) SearchRestoBusiness(search string) ([]domain.Product, error) {
	ret := _m.Called(search)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(string) []domain.Product); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: updatedData, idProduct
func (_m *ProductUseCase) UpdateProduct(updatedData domain.Product, idProduct int) (int, error) {
	ret := _m.Called(updatedData, idProduct)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Product, int) int); ok {
		r0 = rf(updatedData, idProduct)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Product, int) error); ok {
		r1 = rf(updatedData, idProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductUseCase creates a new instance of ProductUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductUseCase(t mockConstructorTestingTNewProductUseCase) *ProductUseCase {
	mock := &ProductUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
