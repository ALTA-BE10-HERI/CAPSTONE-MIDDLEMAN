// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductUserUseCase is an autogenerated mock type for the ProductUserUseCase type
type ProductUserUseCase struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: newProduct, id
func (_m *ProductUserUseCase) CreateProduct(newProduct domain.ProductUser, id int) (domain.ProductUser, int) {
	ret := _m.Called(newProduct, id)

	var r0 domain.ProductUser
	if rf, ok := ret.Get(0).(func(domain.ProductUser, int) domain.ProductUser); ok {
		r0 = rf(newProduct, id)
	} else {
		r0 = ret.Get(0).(domain.ProductUser)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(domain.ProductUser, int) int); ok {
		r1 = rf(newProduct, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: productid, id
func (_m *ProductUserUseCase) DeleteProduct(productid int, id int) int {
	ret := _m.Called(productid, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(productid, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ReadAllProduct provides a mock function with given fields: id
func (_m *ProductUserUseCase) ReadAllProduct(id int) ([]domain.ProductUser, int) {
	ret := _m.Called(id)

	var r0 []domain.ProductUser
	if rf, ok := ret.Get(0).(func(int) []domain.ProductUser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductUser)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// SearchRestoBusiness provides a mock function with given fields: search
func (_m *ProductUserUseCase) SearchRestoBusiness(search string) ([]domain.ProductUser, error) {
	ret := _m.Called(search)

	var r0 []domain.ProductUser
	if rf, ok := ret.Get(0).(func(string) []domain.ProductUser); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: updatedData, productid, id
func (_m *ProductUserUseCase) UpdateProduct(updatedData domain.ProductUser, productid int, id int) (domain.ProductUser, int) {
	ret := _m.Called(updatedData, productid, id)

	var r0 domain.ProductUser
	if rf, ok := ret.Get(0).(func(domain.ProductUser, int, int) domain.ProductUser); ok {
		r0 = rf(updatedData, productid, id)
	} else {
		r0 = ret.Get(0).(domain.ProductUser)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(domain.ProductUser, int, int) int); ok {
		r1 = rf(updatedData, productid, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductUserUseCase creates a new instance of ProductUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductUserUseCase(t mockConstructorTestingTNewProductUserUseCase) *ProductUserUseCase {
	mock := &ProductUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
