// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"
)

// CartUseCase is an autogenerated mock type for the CartUseCase type
type CartUseCase struct {
	mock.Mock
}

// CreateData provides a mock function with given fields: data
func (_m *CartUseCase) CreateData(data domain.Cart) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Cart) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Cart) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteData provides a mock function with given fields: idProd, idFromToken
func (_m *CartUseCase) DeleteData(idProd int, idFromToken int) (int, error) {
	ret := _m.Called(idProd, idFromToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(idProd, idFromToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idProd, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllData provides a mock function with given fields: limit, offset, idFromToken
func (_m *CartUseCase) GetAllData(limit int, offset int, idFromToken int) ([]domain.Cart, int, error) {
	ret := _m.Called(limit, offset, idFromToken)

	var r0 []domain.Cart
	if rf, ok := ret.Get(0).(func(int, int, int) []domain.Cart); ok {
		r0 = rf(limit, offset, idFromToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cart)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(limit, offset, idFromToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, int) error); ok {
		r2 = rf(limit, offset, idFromToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateData provides a mock function with given fields: qty, idProd, idFromToken
func (_m *CartUseCase) UpdateData(qty int, idProd int, idFromToken int) (int, error) {
	ret := _m.Called(qty, idProd, idFromToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(qty, idProd, idFromToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(qty, idProd, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartUseCase creates a new instance of CartUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartUseCase(t mockConstructorTestingTNewCartUseCase) *CartUseCase {
	mock := &CartUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
