// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "middleman-capstone/domain"

	mock "github.com/stretchr/testify/mock"
)

// InOutBoundUseCase is an autogenerated mock type for the InOutBoundUseCase type
type InOutBoundUseCase struct {
	mock.Mock
}

// AddEntry provides a mock function with given fields: newProduct, id, role
func (_m *InOutBoundUseCase) AddEntry(newProduct domain.InOutBounds, id int, role string) (domain.InOutBounds, int) {
	ret := _m.Called(newProduct, id, role)

	var r0 domain.InOutBounds
	if rf, ok := ret.Get(0).(func(domain.InOutBounds, int, string) domain.InOutBounds); ok {
		r0 = rf(newProduct, id, role)
	} else {
		r0 = ret.Get(0).(domain.InOutBounds)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(domain.InOutBounds, int, string) int); ok {
		r1 = rf(newProduct, id, role)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// DeleteEntry provides a mock function with given fields: productid, id, role
func (_m *InOutBoundUseCase) DeleteEntry(productid int, id int, role string) int {
	ret := _m.Called(productid, id, role)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, string) int); ok {
		r0 = rf(productid, id, role)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ReadEntry provides a mock function with given fields: id, role
func (_m *InOutBoundUseCase) ReadEntry(id int, role string) ([]domain.InOutBounds, int) {
	ret := _m.Called(id, role)

	var r0 []domain.InOutBounds
	if rf, ok := ret.Get(0).(func(int, string) []domain.InOutBounds); ok {
		r0 = rf(id, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.InOutBounds)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, string) int); ok {
		r1 = rf(id, role)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// UpdateEntry provides a mock function with given fields: updatedData, productid, id, role
func (_m *InOutBoundUseCase) UpdateEntry(updatedData domain.InOutBounds, productid int, id int, role string) (domain.InOutBounds, int) {
	ret := _m.Called(updatedData, productid, id, role)

	var r0 domain.InOutBounds
	if rf, ok := ret.Get(0).(func(domain.InOutBounds, int, int, string) domain.InOutBounds); ok {
		r0 = rf(updatedData, productid, id, role)
	} else {
		r0 = ret.Get(0).(domain.InOutBounds)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(domain.InOutBounds, int, int, string) int); ok {
		r1 = rf(updatedData, productid, id, role)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

type mockConstructorTestingTNewInOutBoundUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewInOutBoundUseCase creates a new instance of InOutBoundUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInOutBoundUseCase(t mockConstructorTestingTNewInOutBoundUseCase) *InOutBoundUseCase {
	mock := &InOutBoundUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
